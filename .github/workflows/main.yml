name: Deploy Laravel Project on push

on:
  push:
    branches:
      - main

jobs:
  web-deploy:
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Get the latest code
        uses: actions/checkout@v2

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Install Composer dependencies
        run: |
          composer install --no-scripts --no-progress --no-suggest
        continue-on-error: false  # Capture errors, but continue to allow for the error notification

      - name: Update Composer dependencies
        run: |
          composer update --no-scripts --no-progress --no-suggest
        continue-on-error: false

      - name: Dump autoload files
        run: composer dump-autoload --optimize
        continue-on-error: false

      - name: Generate storage link
        run: php artisan storage:link
        continue-on-error: false

      - name: Directory Permissions
        run: chmod -R 777 storage bootstrap/cache
        continue-on-error: false

      - name: Install Node.js (latest version)
        uses: actions/setup-node@v2

      - name: Install NPM dependencies
        run: npm install
        continue-on-error: false

      - name: Build front-end assets
        run: npm run build
        continue-on-error: false

      - name: Remove node_modules folder
        run: rm -rf node_modules

      - name: Remove vendor folder
        run: rm -rf vendor

      - name: ðŸ“‚ Sync files
        uses: SamKirkland/FTP-Deploy-Action@4.0.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "."
          target: "/home/codingfs/htdocs/codingfs.com"
          exclude: |
            .git*
            .gitignore
            .htaccess
            node_modules/
            vendor/


      - name: Check for deployment errors
        id: check_error
        run: |
          if [ -f /path/to/log/file ]; then
            echo "error_output=$(tail -n 20 /path/to/log/file)" >> $GITHUB_ENV
          else
            echo "error_output=No errors captured." >> $GITHUB_ENV
          fi

  # notify:
  #   name: Discord Notification
  #   runs-on: ubuntu-latest
  #   needs:
  #     - web-deploy
  #   if: ${{ always() }} # Always notify, regardless of success or failure

  #   steps:
  #     - name: Notify Discord
  #       uses: nobrayner/discord-webhook@v1
  #       with:
  #         github-token: ${{ secrets.TOKEN }}
  #         discord-webhook: ${{ secrets.WEBHOOK }}
  #         username: "GitHub Bot Actions"
  #         avatar-url: 'https://cdn-icons-png.flaticon.com/512/4712/4712086.png'
  #         title: "Deploy Status: ${{ job.status }}"
  #         description: |
  #           Build and deploy to GitHub Pages: ${{ job.status }}.
  #           Error output (if any): ${{ env.error_output }}
  #         color-success: '#4287f5'
  #         color-failure: '#eb4034'
  #         color-cancelled: '#42daf5'
